function G {
    param (
        [string]$a
    )

    $b = "\\.\pipe\$a"
    $c = @{
        P = $a
        N = "Unknown"
        I = "Unknown"
        C = "Unknown"
        S = "Unknown"
        T = "Unknown"
        M = "Unknown"
        CI = "Unknown"
        O = "Unknown"
        In = "Unknown"
        R = "Unknown"
        W = "Unknown"
        A = "Unknown"
        Co = "Unknown"
    }

    try {
        $d = Get-WmiObject -Query "SELECT ProcessId, Name, CommandLine FROM Win32_Process"
        foreach ($e in $d) {
            if ($e.CommandLine -and $e.CommandLine -like "*$b*") {
                $c.N = $e.Name
                $c.I = $e.ProcessId
                $c.C = $e.CommandLine
                break
            }
        }

        $f = New-Object System.IO.Pipes.NamedPipeClientStream(".", $a, [System.IO.Pipes.PipeDirection]::InOut, [System.IO.Pipes.PipeOptions]::None, [System.Security.Principal.TokenImpersonationLevel]::None)
        $f.Connect(1000)

        $c.S = "Connected"
        $c.T = $f.TransmissionMode.ToString()
        $c.M = [System.IO.Pipes.NamedPipeClientStream]::MaxAllowedServerInstances
        $c.CI = $f.NumberOfServerInstances
        $c.O = $f.OutBufferSize
        $c.In = $f.InBufferSize

        $c.R = $f.CanRead
        $c.W = $f.CanWrite
        $c.A = $f.IsAsync
        $c.Co = $f.IsConnected

        $f.Close()

    } catch {
        $c.S = "Error: $_"
    }

    return $c
}

function H {
    $g = Get-ChildItem -Path \\.\pipe\ | Select-Object -ExpandProperty Name
    $h = @()

    foreach ($i in $g) {
        try {
            Write-Host "Testing connection to pipe: $i"
            $j = New-Object System.IO.Pipes.NamedPipeClientStream(".", $i, [System.IO.Pipes.PipeDirection]::InOut, [System.IO.Pipes.PipeOptions]::None, [System.Security.Principal.TokenImpersonationLevel]::None)
            $j.Connect(1000)

            if ($j.IsConnected) {
                $j.Close()
                $k = G -a $i
                $h += $k
            }
        } catch {
            Write-Host "Error connecting to pipe ${i}: $_"
        }
    }

    return $h
}

$l = H

if ($l.Count -gt 0) {
    Write-Host "Connectable pipes:"
    foreach ($m in $l) {
        Write-Host "Pipe Name: $($m.P)"
        Write-Host "Process Name: $($m.N)"
        Write-Host "Process ID: $($m.I)"
        Write-Host "Command Line: $($m.C)"
        Write-Host "Pipe State: $($m.S)"
        Write-Host "Pipe Type: $($m.T)"
        Write-Host "Maximum Instances: $($m.M)"
        Write-Host "Current Instances: $($m.CI)"
        Write-Host "Outbound Quota: $($m.O)"
        Write-Host "Inbound Quota: $($m.In)"
        Write-Host "Can Read: $($m.R)"
        Write-Host "Can Write: $($m.W)"
        Write-Host "Is Async: $($m.A)"
        Write-Host "Is Connected: $($m.Co)"
        Write-Host "---------------------------------------"
    }
} else {
    Write-Host "No connectable pipes found."
}

#$l | Export-Csv -Path "ConnectableNamedPipeDetails.csv" -NoTypeInformation
