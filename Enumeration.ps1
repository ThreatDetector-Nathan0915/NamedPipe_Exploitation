function Get-NamedPipeSystemInfo {
    param (
        [string]$pipeName
    )

    $pipePath = "\\.\pipe\$pipeName"
    $pipeDetails = @{
        PipeName = $pipeName
        ProcessName = "Unknown"
        ProcessID = "Unknown"
        CommandLine = "Unknown"
        PipeState = "Unknown"
        PipeType = "Unknown"
        MaximumInstances = "Unknown"
        CurrentInstances = "Unknown"
        OutboundQuota = "Unknown"
        InboundQuota = "Unknown"
        CanRead = "Unknown"
        CanWrite = "Unknown"
        IsAsync = "Unknown"
        IsConnected = "Unknown"
    }

    try {
        # Retrieve process details
        $processes = Get-WmiObject -Query "SELECT ProcessId, Name, CommandLine FROM Win32_Process"
        foreach ($process in $processes) {
            if ($process.CommandLine -and $process.CommandLine -like "*$pipePath*") {
                $pipeDetails.ProcessName = $process.Name
                $pipeDetails.ProcessID = $process.ProcessId
                $pipeDetails.CommandLine = $process.CommandLine
                break
            }
        }

        # Retrieve pipe details using System.IO.Pipes
        $pipeClient = New-Object System.IO.Pipes.NamedPipeClientStream(".", $pipeName, [System.IO.Pipes.PipeDirection]::InOut, [System.IO.Pipes.PipeOptions]::None, [System.Security.Principal.TokenImpersonationLevel]::None)
        $pipeClient.Connect(1000)  # 1 second timeout

        $pipeDetails.PipeState = "Connected"
        $pipeDetails.PipeType = $pipeClient.TransmissionMode.ToString()
        $pipeDetails.MaximumInstances = [System.IO.Pipes.NamedPipeClientStream]::MaxAllowedServerInstances
        $pipeDetails.CurrentInstances = $pipeClient.NumberOfServerInstances
        $pipeDetails.OutboundQuota = $pipeClient.OutBufferSize
        $pipeDetails.InboundQuota = $pipeClient.InBufferSize

        # Additional details about the pipe
        $pipeDetails.CanRead = $pipeClient.CanRead
        $pipeDetails.CanWrite = $pipeClient.CanWrite
        $pipeDetails.IsAsync = $pipeClient.IsAsync
        $pipeDetails.IsConnected = $pipeClient.IsConnected

        $pipeClient.Close()

    } catch {
        $pipeDetails.PipeState = "Error: $_"
    }

    return $pipeDetails
}

# Function to get all named pipes and their details, only if they are connectable
function Get-ConnectableNamedPipeDetails {
    $allPipes = Get-ChildItem -Path \\.\pipe\ | Select-Object -ExpandProperty Name
    $connectablePipeDetails = @()

    foreach ($pipe in $allPipes) {
        try {
            Write-Host "Testing connection to pipe: $pipe"
            $pipeClient = New-Object System.IO.Pipes.NamedPipeClientStream(".", $pipe, [System.IO.Pipes.PipeDirection]::InOut, [System.IO.Pipes.PipeOptions]::None, [System.Security.Principal.TokenImpersonationLevel]::None)
            $pipeClient.Connect(1000)  # 1 second timeout

            if ($pipeClient.IsConnected) {
                $pipeClient.Close()
                $details = Get-NamedPipeSystemInfo -pipeName $pipe
                $connectablePipeDetails += $details
            }
        } catch {
            Write-Host "Error connecting to pipe ${pipe}: $_"
        }
    }

    return $connectablePipeDetails
}

# Get all connectable named pipe details
$connectableNamedPipeDetails = Get-ConnectableNamedPipeDetails

# Output the positive results
if ($connectableNamedPipeDetails.Count -gt 0) {
    Write-Host "Connectable pipes:"
    foreach ($details in $connectableNamedPipeDetails) {
        Write-Host "Pipe Name: $($details.PipeName)"
        Write-Host "Process Name: $($details.ProcessName)"
        Write-Host "Process ID: $($details.ProcessID)"
        Write-Host "Command Line: $($details.CommandLine)"
        Write-Host "Pipe State: $($details.PipeState)"
        Write-Host "Pipe Type: $($details.PipeType)"
        Write-Host "Maximum Instances: $($details.MaximumInstances)"
        Write-Host "Current Instances: $($details.CurrentInstances)"
        Write-Host "Outbound Quota: $($details.OutboundQuota)"
        Write-Host "Inbound Quota: $($details.InboundQuota)"
        Write-Host "Can Read: $($details.CanRead)"
        Write-Host "Can Write: $($details.CanWrite)"
        Write-Host "Is Async: $($details.IsAsync)"
        Write-Host "Is Connected: $($details.IsConnected)"
        Write-Host "---------------------------------------"
    }
} else {
    Write-Host "No connectable pipes found."
}

# Optionally, output to a CSV file
#$connectableNamedPipeDetails | Export-Csv -Path "ConnectableNamedPipeDetails.csv" -NoTypeInformation
